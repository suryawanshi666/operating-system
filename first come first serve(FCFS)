/*write the program to stimulte FCFS CPU-schudling.
the arrival time and first CPU-burst for different n number of process should be input to the algorithm.Assume that the fixed IO watting time (2 units).
The next CPU brust should be generated randomaly.
the output should give gantt chart,turnarround time and watting time for each process.
also find the average watting time and turnaround time*/
 
#include<stdio.h>
void main()
{
    int i,j,temp,btemp,at[6],bt[6],wt[6],tt[6],sum=0,num,proc[6];
    float avrg,avg;
    printf("enter the number of process");
    scanf("%d",&num);
    for(i=0;i<num;i++)
    {
        printf("\n enter the process number");
        scanf("%d",&proc[i]);
        printf("\n enter the process arrival time");
        scanf("%d",&at[i]);
        printf("\n enter the process burst time");
        scanf("%d",&bt[i]);
    }
    for(i=0;i<num;i++)
    {
        for(j=0;j<num;j++)
        {
            if(at[i]>at[j])
            {
                temp=at[i];
                at[i]=at[j];
                at[j]=temp;
                btemp=bt[i];
                bt[i]=bt[j];
                bt[j]=btemp;
                temp=proc[i];
                proc[i]=proc[j];
                proc[j]=temp;
            }
        }
    }
    printf("\n after solving on arrival time\n");
    printf("process\t arrival time\t burst time\n");
    for(i=0;i<num;i++)
    {
       printf("\np%d\t",proc[i]);
       printf("%d\t",at[i]);
       printf("%d\t",bt[i]);
    }
    wt[0]=0;
    for(i=0;i<num;i++)
    {
       wt[i+1]=wt[i]+bt[i];
       sum=(wt[i]-at[i]);
    }
    wt[num]=wt[num-1]+bt[num-1];
    printf("\n the watting time is \t%d",sum);
    avrg=(float)sum/(float)num;
    printf("\n the average watting time is \t%f",avrg);
    sum=0;
    for(i=0;i<num;i++)
    {
        tt[i]=wt[i+1]-at[i];
        sum+=tt[i];
    }
    printf("\n the sum of turnaround time is\t%d",sum);
    avg=(float)sum/(float)num;
    printf("\n the average turnaround time is\t%f",avg);
    printf("\nGANTT CHART\n");
    printf("\n-------------------------------------------------------------------------------\n");
    for(i=0;i<num;i++)
    {
       printf("\t|p%d\t",proc[i]);
    }
    printf("\n--------------------------------------------------------------------------------\n");
    for(i=0;i<=num;i++)
    {
        printf("%d\t\t",wt[i]);
    }
}
